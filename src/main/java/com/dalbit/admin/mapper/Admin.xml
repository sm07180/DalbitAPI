<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.admin.dao.AdminDao" >

    <select id="selectMobileAdminMenuAuth" parameterType="com.dalbit.admin.vo.SearchVo" resultType="com.dalbit.admin.vo.AdminMenuVo">
        /* Admin.xml - selectMobileAdminMenuAuth */
        select menu.idx
            , menu.menu_name
            , menu.menu_url
            , menu.depth
            , menu.order_no
            , menu.parent_idx
            , auth.is_read
            , auth.is_insert
            , auth.is_delete
        from rd_admin.tb_admin_test_account test
            , rd_admin.tb_admin_menu_auth auth
            , rd_admin.tb_admin_menu menu
        where test.emp_no = auth.emp_no
            and auth.menu_idx = menu.idx
            and mem_no = #{mem_no}
            and menu.is_use = 1
            and menu.mobile_yn = 'Y'
    </select>

    <select id="selectBroadcastList" parameterType="com.dalbit.admin.vo.SearchVo" resultType="com.dalbit.admin.vo.BroadcastVo">
        /* Admin.xml - selectBroadcastList */
        select *
        from(
            select
                room.room_no
                , room.image_background
                , room.mem_no
                , room.start_date
                , basic.mem_nick
                , basic.mem_id
                , (select `code` from rd_data.tbl_code_define where type = 'subject_type' and value = room.subject_type) subject_name
                , room.title
                , (select count(*) from rd_data.tb_broadcast_room_member where room_no = room.room_no and state = 0) liveListener
                , (select count(*) from rd_data.tb_member_report where status = 0 and reported_mem_no = room.mem_no) reportedCnt
                , room.state
            from rd_data.tb_broadcast_room room
                , rd_data.tb_member_basic basic
            where room.mem_no = basic.mem_no
                and room.state <![CDATA[<>]]> 4
        ) list
        <if test='reportYn == "Y"'>
        where 0 <![CDATA[<]]> reportedCnt
        </if>
        limit #{searchStart}, #{searchEnd}
    </select>

    <select id="callBroadcastRoomExit" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* Admin.xml - callBroadcastRoomExit */
        call rd_data.sp_broadcast_room_exit(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <update id="updateBroadcastMemberExit" parameterType="com.dalbit.admin.vo.procedure.P_RoomForceExitInputVo">
        /* Admin.xml - updateBroadcastMemberExit */
        update rd_data.tb_broadcast_room_member
		   set state = 1,
			   last_upd_date = now()
        where  room_no = #{room_no} and state = 0
    </update>

    <update id="updateBroadcastExit" parameterType="com.dalbit.admin.vo.BroadcastExitVo">
        /* Admin.xml - updateBroadcastExit */
        update rd_data.tb_broadcast_room
           set state= 4,
               end_date = now(),
               airtime = TIMESTAMPDIFF( second, #{start_date}, NOW()),
               last_upd_date = now()
         where room_no = #{room_no}
    </update>

    <select id="selectProfileList" parameterType="com.dalbit.admin.vo.SearchVo" resultType="com.dalbit.admin.vo.ProfileVo">
        /* Admin.xml - selectProfileList */
        select *
        from (
            select
                session.last_upd_date
                , session.mem_no
                , profile.image_profile
                , basic.mem_nick
                , basic.mem_id
                , basic.mem_userid
                , basic.mem_join_date
                , (select count(*) from rd_data.tb_member_report where status = 0 and reported_mem_no = basic.mem_no) as reportedCnt
                from rd_data.tb_member_basic basic
                inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
                inner join (select mem_no, max(last_upd_date) last_upd_date
                                from rd_data.tb_member_session
                                group by mem_no
                                order by max(last_upd_date) desc) session on basic.mem_no = session.mem_no
                where session.mem_no is not null
        ) list
        <if test='reportYn == "Y"'>
            where 0 <![CDATA[<]]> reportedCnt
        </if>
        limit #{searchStart}, #{searchEnd}
    </select>

    <update id="proImageInit" parameterType="com.dalbit.admin.vo.ProImageInitVo">
        /* Admin.xml - proImageInit */
        update rd_data.tb_member_profile
           set image_profile = #{reset_image_profile}
         where mem_no = #{mem_no}
    </update>

    <insert id="insertProfileHistory" parameterType="com.dalbit.admin.vo.ProImageInitVo">
        /* Admin.xml - insertProfileHistory */
        insert into
          rd_data.tb_member_profile_edit_history (mem_no, edit_contents, op_name, last_upd_date, type)
        values
          (#{mem_no}, #{edit_contents}, #{op_name}, current_timestamp(), #{type})
    </insert>

    <update id="broImageInit" parameterType="com.dalbit.admin.vo.BroImageInitVo">
        /* Admin.xml - broImageInit */
        update rd_data.tb_broadcast_room
           set image_background= #{reset_image_background}
         where room_no = #{room_no}
    </update>

    <insert id="insertBroadHistory" parameterType="com.dalbit.admin.vo.BroImageInitVo">
        /* Admin.xml - insertBroadHistory */
        insert into
          rd_data.tb_broadcast_room_edit_history (room_no, edit_contents, op_name, last_upd_date)
        values
          (#{room_no}, #{edit_contents}, #{op_name}, current_timestamp())
    </insert>

    <update id="nickTextInit" parameterType="com.dalbit.admin.vo.NickTextInitVo">
        /* Admin.xml - nickTextInit */
        update rd_data.tb_member_basic
          set mem_nick = #{mem_userid}
        where mem_no = #{mem_no}
    </update>

    <update id="broTitleTextInit" parameterType="com.dalbit.admin.vo.BroTitleTextInitVo">
        /* Admin.xml - broTitleTextInit */
        update rd_data.tb_broadcast_room
          set title = #{reset_title}
        where room_no = #{room_no}
    </update>

    <insert id="insertNotiHistory" parameterType="com.dalbit.admin.vo.NotiInsertVo">
        /* Admin.xml - insertNotiHistory */
        insert into
          rd_data.tb_member_notification( mem_no, type_noti, contents, memo  )
        values
          ( #{mem_no}, #{slctType}, #{notiContents}, #{notiMemo})
    </insert>

    <insert id="declarationOperate" parameterType="com.dalbit.admin.vo.DeclarationVo">
        /* Admin.xml - declarationOperate */
        insert into
          rd_data.tb_member_report
        (mem_no, mem_userid, mem_nick, mem_phone, mem_level, mem_grade, reported_mem_no, reported_userid, reported_nick, reported_phone
        , reported_level, reported_grade, room_no, reason, etc, status, op_code, op_msg, platform, browser, ip, op_name, op_date, reg_date)
         value
         (#{mem_no}, #{mem_userid}, #{mem_nick}, null, 1, null, #{reported_mem_no}, #{reported_userid}, #{reported_nick}, #{reported_phone}
         , #{reported_level}, #{reported_grade}, null, 1, null, 2, #{opCode}, #{notiMemo}, 'Mobile', #{browser}, #{ip}, #{opName}, now(), now())
     </insert>

    <select id="getMemberInfo" parameterType="String" resultType="com.dalbit.admin.vo.MemberInfoVo">
        /* Admin.xml - getMemberInfo */
        select
              b.mem_no
              , b.mem_userid
              , b.mem_nick
              , b.mem_phone
              , l.level
              , l.grade
          from rd_data.tb_member_basic b
            , rd_data.tb_member_level l
            where b.mem_no = l.mem_no
              and b.mem_no = #{mem_no}
    </select>

</mapper>